<#@ template    debug="false" hostspecific="true" language="C#" inherits="Helpers.Sql" #>
<#@ include     file="..\Config\Config.ttinclude" #> 
<#@ include     file="$(SolutionDir)Helpers\MultipleOutputHelper.ttinclude" #>
<#@ assembly    name="$(TargetDir)\Helpers.dll" #>
<#@ output extension=".cs" #>
<# 
    var manager = Manager.Create(Host, GenerationEnvironment); 
#>
<# 

    var database = new Database(server, Config.Database.Name);

    foreach(var tbl in Config.Tables)
    {
        var table = new Table(database, tbl.Name);
        table.Refresh();
#>
<# manager.StartNewFile(table.Name + ".cs"); #>
// Autogenerated Model
using System;
namespace Bwcim.Models
{
    public class <#=table.Name #> 
    {
<#      foreach(Column column in table.Columns)
        {
#>       
            public <#=MappedDataTypes[column.DataType.Name] #> <#= column.Name#>  { get; set; }
<#
        }
#>
    }
}
<# manager.EndBlock(); #>
<# manager.StartNewFile(table.Name + "Context.cs"); #>
// Autogenerated Model
using System;
using System.Linq;
using System.Collections.Generic;
namespace Bwcim.Models
{
    public class <#=table.Name#>Context : DataContext
    {
        private const string Update_Query       = "<#=RenderSQL_Update(table)#>";
        private const string Insert_Query       = "<#=RenderSQL_Insert(table)#>";
        private const string Select_Query       = "<#=RenderSQL_Select(table)#>";
        private const string SelectAll_Query    = "<#=RenderSQL_SelectAll(table)#>";
        private const string Delete_Query       = "<#=RenderSQL_Delete(table)#>";
        
        public <#= table.Name #> Update(<#= table.Name#> model)
        {
            var updated = Query<<#=table.Name#>>(Update_Query, model);
            if(updated == null)
                return null;
            
            return updated.FirstOrDefault();
        }

        public <#= table.Name #> Insert(<#= table.Name#> model)
        {
            var insert = Query<<#=table.Name#>>(Insert_Query, model);

            if(insert == null)
                return null;
            
            return insert.FirstOrDefault();
        }

<#  
        var primary = GetPrimaryKey(table);
#>

        public <#= table.Name #> Get(<#=MappedDataTypes[primary.DataType.Name] #> <#= primary.Name#>)
        {
            var select = Query<<#=table.Name#>>(Select_Query, <#= primary.Name#>);
            if(select == null)
                return null;
            
            return select.FirstOrDefault();
        }

        public bool Delete(<#=MappedDataTypes[primary.DataType.Name] #> <#= primary.Name#>)
        {
            var deleted = Query<bool>(Delete_Query, <#= primary.Name#>);
            if(deleted == null)
                return false;
            
            return deleted.FirstOrDefault();
        }

        public IEnumerable<<#= table.Name #>> List()
        {
            var list = Query<<#=table.Name#>>(SelectAll_Query);
            if(list == null)
                return null;
            
            return list.ToList();
        }
    }
}
<# manager.EndBlock(); #>
<#
}
#>
<# manager.Process(true); #>